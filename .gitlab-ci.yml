#cache:
#  paths:
#    - local/
#    - static/
#    - node_modules/
default:
#  image: ruby:2.1

stages:
  - test
  - build
  - deploy

#before_script:
#  - apk update
#  - apk add openssh
#  - cd nuxt && yarn install && cd ..

#cache:
#  key: $CI_PROJECT_ID
#  policy: pull
#  untracked: true

test-fe-stage:
  image: node:lts-alpine3.15
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_COMMIT_TAG == null
      changes:
        - ".gitlab-ci.yml"
      when: never
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_COMMIT_TAG == null
      when: never
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop' && $CI_MERGE_REQUEST_APPROVED
      when: never
    - when: never
  variables:
  stage: test
  environment:
    name: test
  script:
    - echo "Run tests"
    - pwd
    - cd nuxt
    - yarn install
    - yarn test

deploy-fe-stage:      # This job runs in the deploy stage.
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_COMMIT_TAG == null
      changes:
        - ".gitlab-ci.yml"
      when: manual
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_COMMIT_TAG == null
      when: always
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop' && $CI_MERGE_REQUEST_APPROVED
      when: always
    - when: never
  variables:
    SSH_HOST: $SSH_HOST
    SSH_USER: $SSH_USER
    SSH_KEY: $SSH_KEY
    TARGET_PATH: /var/www/stage
    TARGET_PATH_NEW: /var/www/stage.new
    TARGET_PATH_OLD: /var/www/stage.old
    ENV_FILE_SRC: /var/www/bak/.env
    NUXT_ENV_FILE_SRC: /var/www/bak/nuxt/.env
    NUXT_ENV_STAGE: $NUXT_ENV_STAGE
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment:
    name: deployment
  script:
    # Setup SSH deploy keys
    - echo "Build SSH environment (target='$SSH_USER@$SSH_HOST')..."
    - mkdir -p ~/.ssh/
    - echo "$SSH_KEY" > ~/.ssh/ssh.key
    - chmod 600 ~/.ssh/ssh.key
    - | 
      cat > ~/.ssh/config <<END
      Host target
        HostName $SSH_HOST
        User $SSH_USER
        IdentityFile ~/.ssh/ssh.key
        StrictHostKeyChecking no
      END
- echo "Deploying application source..."
    #- echo "PATH=$TARGET_PATH"
    #- pwd
    - ssh target "bash -c 'mkdir -p $TARGET_PATH'"
    - ssh target "bash -c 'sudo rm -rf $TARGET_PATH_OLD'"
    - ssh target "bash -c 'sudo rm -rf $TARGET_PATH_NEW'"
    - echo "$NUXT_ENV_STAGE" > nuxt/.env
    - echo "$NUXT_ENV_STAGE" > nuxt/.env.production
    - scp -r "$(pwd)" target:$TARGET_PATH_NEW
    #- ssh target "bash -c 'cp $ENV_FILE_SRC $TARGET_PATH_NEW/.env'"    
    #- ssh target "bash -c 'cp $NUXT_ENV_FILE_SRC $TARGET_PATH_NEW/nuxt/.env'"    
    #- ssh target "bash -c 'cp $NUXT_ENV_FILE_SRC $TARGET_PATH_NEW/nuxt/.env.production'"    
    - echo "Building Docker image"
    - ssh target "bash -c 'cd $TARGET_PATH_NEW; sudo docker build -t marketplace-stage .'"    
    - ssh target "bash -c 'sudo docker stop \$(sudo docker ps -a -q --filter name=marketplace-stage --format="{{.ID}}"); exit 0'"
    - ssh target "bash -c 'sudo docker container rm \$(sudo docker container ls -a -q --filter name=marketplace-stage --format="{{.ID}}"); exit 0'"
    - ssh target "bash -c 'sudo docker run -d -p 8080:3000 --restart on-failure --name marketplace-stage marketplace-stage'"
    - ssh target "bash -c 'mv $TARGET_PATH $TARGET_PATH_OLD'"
    - ssh target "bash -c 'mv $TARGET_PATH_NEW $TARGET_PATH'"
    - echo "Deployment complete!"

test-fe-prod:
  image: node:lts-alpine3.15
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG == null
      changes:
        - ".gitlab-ci.yml"
      when: never
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG == null
      when: never
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main' && $CI_MERGE_REQUEST_APPROVED
      when: never
    - when: never
  variables:
  stage: test
  environment:
    name: test
  script:
    - echo "Run tests"
    - pwd
    - cd nuxt
    - yarn install
    - yarn test

deploy-fe-prod:      # This job runs in the deploy stage.
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG == null
      changes:
        - ".gitlab-ci.yml"
      when: manual
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TAG == null
      when: manual
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main' && $CI_MERGE_REQUEST_APPROVED
      when: manual
    - when: never
#  cache:
#    key: $CI_PROJECT_ID
#    policy: pull-push
#    paths:
#      - /nuxt/.yarn
#      - '/nuxt/node_modules'
#      - 'nuxt/packages/*/node_modules'
  variables:
    SSH_HOST_PROD: $SSH_HOST_PROD
    SSH_USER_PROD: $SSH_USER_PROD
    SSH_KEY_PROD: $SSH_KEY_PROD
    TARGET_PATH: /var/www/front
    TARGET_PATH_NEW: /var/www/front.new
    TARGET_PATH_OLD: /var/www/front.old
    #ENV_FILE_SRC: /var/www/bak/.env
    #NUXT_ENV_FILE_SRC: /var/www/bak/nuxt/.env
    NUXT_ENV_PRODUCTION: $NUXT_ENV_PRODUCTION
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment:
    name: deployment
  script:
    # Setup SSH deploy keys
    - echo "Build SSH environment (target='$SSH_USER_PROD@$SSH_HOST_PROD')..."
    - mkdir -p ~/.ssh/
    - echo "$SSH_KEY_PROD" > ~/.ssh/ssh.key
    - echo $NUXT_ENV_PRODUCTION
    - chmod 600 ~/.ssh/ssh.key
    - | 
      cat > ~/.ssh/config <<END
      Host target
        HostName $SSH_HOST_PROD
        User $SSH_USER_PROD
        IdentityFile ~/.ssh/ssh.key
        StrictHostKeyChecking no
      END
- echo "Deploying application source..."
    #- echo "PATH=$TARGET_PATH"
    #- pwd
    - ssh target "bash -c 'mkdir -p $TARGET_PATH'"
    - ssh target "bash -c 'sudo rm -rf $TARGET_PATH_OLD'"
    - ssh target "bash -c 'sudo rm -rf $TARGET_PATH_NEW'"
    - echo "$NUXT_ENV_PRODUCTION" > nuxt/.env
    - echo "$NUXT_ENV_PRODUCTION" > nuxt/.env.production
    - scp -r "$(pwd)" target:$TARGET_PATH_NEW
    #- ssh target "bash -c 'cp $ENV_FILE_SRC $TARGET_PATH_NEW/.env'"    
    #- ssh target "bash -c 'cp $NUXT_ENV_FILE_SRC $TARGET_PATH_NEW/nuxt/.env'"    
    #- ssh target "bash -c 'cp $NUXT_ENV_FILE_SRC $TARGET_PATH_NEW/nuxt/.env.production'"    
    - echo "Building Docker image"
    - ssh target "bash -c 'cd $TARGET_PATH_NEW; sudo docker build -t marketplace-prod .'"    
    - ssh target "bash -c 'sudo docker stop \$(sudo docker ps -a -q --filter name=marketplace-prod --format="{{.ID}}"); exit 0'"
    - ssh target "bash -c 'sudo docker container rm \$(sudo docker container ls -a -q --filter name=marketplace-prod --format="{{.ID}}"); exit 0'"
    - ssh target "bash -c 'sudo docker run -d -p 8080:3000 --restart on-failure --name marketplace-prod marketplace-prod'"
    - ssh target "bash -c 'mv $TARGET_PATH $TARGET_PATH_OLD'"
    - ssh target "bash -c 'mv $TARGET_PATH_NEW $TARGET_PATH'"
    - echo "Deployment complete!"

